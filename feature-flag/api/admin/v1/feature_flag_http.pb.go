// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.11
// source: admin/v1/feature_flag.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFeatureFlagCreateFeatureFlag = "/api.admin.v1.FeatureFlag/CreateFeatureFlag"
const OperationFeatureFlagDeleteFeatureFlag = "/api.admin.v1.FeatureFlag/DeleteFeatureFlag"
const OperationFeatureFlagGetFeatureFlag = "/api.admin.v1.FeatureFlag/GetFeatureFlag"
const OperationFeatureFlagListFeatureFlag = "/api.admin.v1.FeatureFlag/ListFeatureFlag"
const OperationFeatureFlagUpdateFeatureFlag = "/api.admin.v1.FeatureFlag/UpdateFeatureFlag"

type FeatureFlagHTTPServer interface {
	CreateFeatureFlag(context.Context, *CreateFeatureFlagRequest) (*CreateFeatureFlagReply, error)
	DeleteFeatureFlag(context.Context, *DeleteFeatureFlagRequest) (*DeleteFeatureFlagReply, error)
	GetFeatureFlag(context.Context, *GetFeatureFlagRequest) (*GetFeatureFlagReply, error)
	ListFeatureFlag(context.Context, *ListFeatureFlagRequest) (*ListFeatureFlagReply, error)
	UpdateFeatureFlag(context.Context, *UpdateFeatureFlagRequest) (*UpdateFeatureFlagReply, error)
}

func RegisterFeatureFlagHTTPServer(s *http.Server, srv FeatureFlagHTTPServer) {
	r := s.Route("/")
	r.POST("/x/admin/feature-flag/flag/create", _FeatureFlag_CreateFeatureFlag0_HTTP_Handler(srv))
	r.POST("/x/admin/feature-flag/flag/update", _FeatureFlag_UpdateFeatureFlag0_HTTP_Handler(srv))
	r.POST("/x/admin/feature-flag/flag/delete", _FeatureFlag_DeleteFeatureFlag0_HTTP_Handler(srv))
	r.GET("/x/admin/feature-flag/flag", _FeatureFlag_GetFeatureFlag0_HTTP_Handler(srv))
	r.GET("/x/admin/feature-flag/flags", _FeatureFlag_ListFeatureFlag0_HTTP_Handler(srv))
}

func _FeatureFlag_CreateFeatureFlag0_HTTP_Handler(srv FeatureFlagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateFeatureFlagRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeatureFlagCreateFeatureFlag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateFeatureFlag(ctx, req.(*CreateFeatureFlagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateFeatureFlagReply)
		return ctx.Result(200, reply)
	}
}

func _FeatureFlag_UpdateFeatureFlag0_HTTP_Handler(srv FeatureFlagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFeatureFlagRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeatureFlagUpdateFeatureFlag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateFeatureFlag(ctx, req.(*UpdateFeatureFlagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateFeatureFlagReply)
		return ctx.Result(200, reply)
	}
}

func _FeatureFlag_DeleteFeatureFlag0_HTTP_Handler(srv FeatureFlagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFeatureFlagRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeatureFlagDeleteFeatureFlag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteFeatureFlag(ctx, req.(*DeleteFeatureFlagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFeatureFlagReply)
		return ctx.Result(200, reply)
	}
}

func _FeatureFlag_GetFeatureFlag0_HTTP_Handler(srv FeatureFlagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFeatureFlagRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeatureFlagGetFeatureFlag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFeatureFlag(ctx, req.(*GetFeatureFlagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFeatureFlagReply)
		return ctx.Result(200, reply)
	}
}

func _FeatureFlag_ListFeatureFlag0_HTTP_Handler(srv FeatureFlagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFeatureFlagRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeatureFlagListFeatureFlag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFeatureFlag(ctx, req.(*ListFeatureFlagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFeatureFlagReply)
		return ctx.Result(200, reply)
	}
}

type FeatureFlagHTTPClient interface {
	CreateFeatureFlag(ctx context.Context, req *CreateFeatureFlagRequest, opts ...http.CallOption) (rsp *CreateFeatureFlagReply, err error)
	DeleteFeatureFlag(ctx context.Context, req *DeleteFeatureFlagRequest, opts ...http.CallOption) (rsp *DeleteFeatureFlagReply, err error)
	GetFeatureFlag(ctx context.Context, req *GetFeatureFlagRequest, opts ...http.CallOption) (rsp *GetFeatureFlagReply, err error)
	ListFeatureFlag(ctx context.Context, req *ListFeatureFlagRequest, opts ...http.CallOption) (rsp *ListFeatureFlagReply, err error)
	UpdateFeatureFlag(ctx context.Context, req *UpdateFeatureFlagRequest, opts ...http.CallOption) (rsp *UpdateFeatureFlagReply, err error)
}

type FeatureFlagHTTPClientImpl struct {
	cc *http.Client
}

func NewFeatureFlagHTTPClient(client *http.Client) FeatureFlagHTTPClient {
	return &FeatureFlagHTTPClientImpl{client}
}

func (c *FeatureFlagHTTPClientImpl) CreateFeatureFlag(ctx context.Context, in *CreateFeatureFlagRequest, opts ...http.CallOption) (*CreateFeatureFlagReply, error) {
	var out CreateFeatureFlagReply
	pattern := "/x/admin/feature-flag/flag/create"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeatureFlagCreateFeatureFlag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeatureFlagHTTPClientImpl) DeleteFeatureFlag(ctx context.Context, in *DeleteFeatureFlagRequest, opts ...http.CallOption) (*DeleteFeatureFlagReply, error) {
	var out DeleteFeatureFlagReply
	pattern := "/x/admin/feature-flag/flag/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeatureFlagDeleteFeatureFlag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeatureFlagHTTPClientImpl) GetFeatureFlag(ctx context.Context, in *GetFeatureFlagRequest, opts ...http.CallOption) (*GetFeatureFlagReply, error) {
	var out GetFeatureFlagReply
	pattern := "/x/admin/feature-flag/flag"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeatureFlagGetFeatureFlag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeatureFlagHTTPClientImpl) ListFeatureFlag(ctx context.Context, in *ListFeatureFlagRequest, opts ...http.CallOption) (*ListFeatureFlagReply, error) {
	var out ListFeatureFlagReply
	pattern := "/x/admin/feature-flag/flags"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeatureFlagListFeatureFlag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeatureFlagHTTPClientImpl) UpdateFeatureFlag(ctx context.Context, in *UpdateFeatureFlagRequest, opts ...http.CallOption) (*UpdateFeatureFlagReply, error) {
	var out UpdateFeatureFlagReply
	pattern := "/x/admin/feature-flag/flag/update"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeatureFlagUpdateFeatureFlag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
